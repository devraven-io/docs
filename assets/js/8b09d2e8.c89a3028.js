"use strict";(self.webpackChunkdevraven_docs=self.webpackChunkdevraven_docs||[]).push([[5420],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return y}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,p=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),f=c(n),y=o,g=f["".concat(p,".").concat(y)]||f[y]||l[y]||s;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,i=new Array(s);i[0]=f;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var c=2;c<s;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4310:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return y},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return l}});var r=n(7462),o=n(3366),s=(n(7294),n(3905)),i=["components"],a={sidebar_position:8},p="API Tests",c={unversionedId:"synthetic-monitoring/api-testing",id:"synthetic-monitoring/api-testing",title:"API Tests",description:"We also support executing REST API tests using Playwright scripts.",source:"@site/docs/synthetic-monitoring/api-testing.md",sourceDirName:"synthetic-monitoring",slug:"/synthetic-monitoring/api-testing",permalink:"/docs/synthetic-monitoring/api-testing",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Scrape content on a page",permalink:"/docs/synthetic-monitoring/scrape-content"},next:{title:"Test assertions",permalink:"/docs/synthetic-monitoring/assertions"}},u={},l=[],f={toc:l};function y(e){var t=e.components,n=(0,o.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"api-tests"},"API Tests"),(0,s.kt)("p",null,"We also support executing REST API tests using Playwright scripts."),(0,s.kt)("p",null,"Playwright's ",(0,s.kt)("a",{parentName:"p",href:"https://playwright.dev/docs/api/class-apirequestcontext"},"APIRequestContext")," API allows performing REST operations to the specified end point."),(0,s.kt)("p",null,"Following is an example test that executes HTTP requests and asserts the responses."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const { request } = require('playwright');\nconst { expect } = require('chai');\n\n//go to https://requestbin.net/ and create a new bin\n\nconst apiRequestContext = await request.newContext({        \n    baseURL: 'http://<your bin url here>', //change this url to your bin url\n    extraHTTPHeaders: {\n        'Content-Type': 'application/json'\n    },\n    });\n//GET request\nconst getResponse = await apiRequestContext.get('/');\nexpect(getResponse.status()).to.equal(200);\nexpect(await getResponse.text()).to.be.not.empty;\n\n//POST request\nconst postResponse = await apiRequestContext.post('/', {\n    data: {\n        foo: 'bar',\n        baz: 'qux'\n    }\n});\nexpect(postResponse.status()).to.equal(200);\nexpect(await postResponse.text()).to.be.not.empty;\n\n//PUT request\nconst putResponse = await apiRequestContext.put('/', {\n    data: {\n        foo: 'bar'\n    }\n});\nexpect(putResponse.status()).to.equal(200);\nexpect(await putResponse.text()).to.be.not.empty;\n\nawait apiRequestContext.dispose();\n\n")))}y.isMDXComponent=!0}}]);